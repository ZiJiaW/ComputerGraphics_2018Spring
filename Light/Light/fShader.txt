#version 330 core
out vec4 FragColor;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 objectColor;// 物体原来颜色
uniform vec3 lightColor;// 光源色
uniform vec3 lightPos;//光源坐标
uniform vec3 viewPos;// 观察点坐标

void main()
{
	float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;// 环境光分量

	vec3 norm = normalize(Normal);// 法线单位向量
	vec3 lightDir = normalize(lightPos - FragPos);// 片段指向光源的单位向量
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;// 漫反射分量
	
	float specularStrength = 0.5;//镜面强度
	vec3 viewDir = normalize(viewPos - FragPos);// 观察者到照射点的单位向量
	vec3 reflectDir = reflect(-lightDir, norm);// 将之前计算的光源与照射点方向取反，再计算反射方向
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);// 视线与反射方向点乘，计算32次幂（光的反射度）
	vec3 specular = specularStrength * spec * lightColor;
	
    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
}